import tkinter as tk
from tkinter import ttk
import time
import json
from datetime import datetime, timedelta
import psutil
import win32gui
import win32process
from collections import defaultdict
from tkinter import messagebox
import sv_ttk
import os
from PIL import Image, ImageTk
import pandas as pd
import openpyxl
from openpyxl.utils.dataframe import dataframe_to_rows
import sys
import pystray
from PIL import Image
import threading
import win32ui
import win32con
import win32api
import win32gui_struct
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import seaborn as sns
import numpy as np

class ModernEkranTakip:
    def __init__(self):
        self.pencere = tk.Tk()
        self.pencere.title("Modern Ekran S√ºresi Takip")
        self.pencere.geometry("1000x800")
        
        # ƒ∞kon √∂nbelleƒüi
        self.icon_cache = {}
        
        # Tema durumu
        self.tema = "dark"  # Varsayƒ±lan tema
        
        # Modern tema uygula
        sv_ttk.set_theme(self.tema)
        
        # Kategori veritabanƒ±nƒ± y√ºkle veya olu≈ütur
        self.kategori_dosyasi = 'kategoriler.json'
        self.kategoriler = self.kategori_veritabanini_yukle()
        
        # Veriler i√ßin s√∂zl√ºk
        self.uygulama_sureleri = defaultdict(float)
        self.uygulama_zaman_araliklari = defaultdict(list)
        self.kategori_sureleri = defaultdict(float)
        self.son_kontrol = time.time()
        self.aktif_uygulama = ""
        self.bugunun_tarihi = datetime.now().strftime('%d.%m.%Y')
        
        # √ñnceki verileri y√ºkle
        self.onceki_verileri_yukle()
        
        # Sistem tepsisi ikonu i√ßin deƒüi≈ükenler
        self.icon = None
        self.icon_kapatiliyor = False
        
        # Notebook (sekmeli aray√ºz) olu≈ütur
        self.notebook = ttk.Notebook(self.pencere)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Ana takip sekmesi
        self.takip_sekmesi = ttk.Frame(self.notebook)
        self.notebook.add(self.takip_sekmesi, text="Anlƒ±k Takip")
        
        # ƒ∞statistik sekmesi
        self.istatistik_sekmesi = ttk.Frame(self.notebook)
        self.notebook.add(self.istatistik_sekmesi, text="ƒ∞statistikler")
        
        # G√ºnl√ºk ƒ∞statistik sekmesi
        self.gunluk_istatistik_sekmesi = ttk.Frame(self.notebook)
        self.notebook.add(self.gunluk_istatistik_sekmesi, text="G√ºnl√ºk ƒ∞statistik")
        
        self.arayuz_olustur()
        self.istatistik_arayuzu_olustur()
        self.gunluk_istatistik_arayuzu_olustur()
        self.icon_olustur()
        self.takip_baslat()
        
        # Pencere kapatma olayƒ±nƒ± yakala
        self.pencere.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # Bildirim g√∂ster
        messagebox.showinfo("Bilgi", "Program sistem tepsisinde √ßalƒ±≈ümaya devam edecek.\nUygulamayƒ± a√ßmak i√ßin sistem tepsisindeki ikona tƒ±klayabilirsiniz.")

    def onceki_verileri_yukle(self):
        """CSV dosyasƒ±ndan bug√ºne ait verileri y√ºkle ve topla"""
        try:
            csv_dosyasi = 'ekran_suresi_takip.csv'
            if os.path.exists(csv_dosyasi):
                df = pd.read_csv(csv_dosyasi)
                bugunun_verileri = df[df['Tarih'] == self.bugunun_tarihi]
                
                if not bugunun_verileri.empty:
                    # Aynƒ± uygulamalarƒ±n s√ºrelerini topla
                    toplam_sureler = bugunun_verileri.groupby('Uygulama')['S√ºre (Saat)'].sum()
                    son_kullanƒ±mlar = bugunun_verileri.groupby('Uygulama')['Son Kullanƒ±m'].last()
                    
                    # Verileri uygulama s√ºrelerine ekle
                    for uygulama, sure in toplam_sureler.items():
                        self.uygulama_sureleri[uygulama] = sure * 3600  # Saati saniyeye √ßevir
                        son_kullanim = son_kullanƒ±mlar[uygulama]
                        if son_kullanim != "-":
                            self.uygulama_zaman_araliklari[uygulama].append(son_kullanim)
                    
                    print(f"Bug√ºne ait {len(toplam_sureler)} uygulamanƒ±n verileri y√ºklendi.")
                
        except Exception as e:
            print(f"√ñnceki verileri y√ºkleme hatasƒ±: {str(e)}")

    def get_file_icon(self, exe_name):
        """Windows'tan exe dosyasƒ±nƒ±n ikonunu al"""
        if exe_name in self.icon_cache:
            return self.icon_cache[exe_name]
            
        try:
            # Sistem yollarƒ±nƒ± kontrol et
            system32_path = os.path.join(os.environ['SystemRoot'], 'System32', exe_name)
            program_files = os.path.join(os.environ['ProgramFiles'], exe_name)
            program_files_x86 = os.path.join(os.environ['ProgramFiles(x86)'], exe_name)
            
            possible_paths = [system32_path, program_files, program_files_x86]
            icon_path = None
            
            for path in possible_paths:
                if os.path.exists(path):
                    icon_path = path
                    break
            
            if icon_path is None:
                icon_path = exe_name
            
            # B√ºy√ºk ikon indeksi
            ico_x = win32api.GetSystemMetrics(win32con.SM_CXICON)
            ico_y = win32api.GetSystemMetrics(win32con.SM_CYICON)
            
            large, small = win32gui.ExtractIconEx(icon_path, 0)
            if large:
                win32gui.DestroyIcon(large[0])
            
            if small:
                hdc = win32ui.CreateDCFromHandle(win32gui.GetDC(0))
                hbmp = win32ui.CreateBitmap()
                hbmp.CreateCompatibleBitmap(hdc, ico_x, ico_y)
                hdc = hdc.CreateCompatibleDC()
                
                hdc.SelectObject(hbmp)
                hdc.DrawIcon((0, 0), small[0])
                
                bmpstr = hbmp.GetBitmapBits(True)
                img = Image.frombuffer(
                    'RGBA',
                    (ico_x, ico_y),
                    bmpstr, 'raw', 'BGRA', 0, 1
                )
                
                # ƒ∞konu 16x16 boyutuna k√º√ß√ºlt
                img = img.resize((16, 16), Image.Resampling.LANCZOS)
                
                # PhotoImage olu≈ütur
                icon = ImageTk.PhotoImage(img)
                self.icon_cache[exe_name] = icon
                
                # Temizlik
                win32gui.DestroyIcon(small[0])
                hdc.DeleteDC()
                hbmp.DeleteObject()
                
                return icon
        except:
            # Hata durumunda varsayƒ±lan ikon
            img = Image.new('RGBA', (16, 16), (128, 128, 128, 255))
            icon = ImageTk.PhotoImage(img)
            self.icon_cache[exe_name] = icon
            return icon
            
        return None

    def arayuz_olustur(self):
        # Ana frame
        self.ana_frame = ttk.Frame(self.takip_sekmesi)
        self.ana_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # √úst kontrol paneli
        self.kontrol_panel = ttk.Frame(self.ana_frame)
        self.kontrol_panel.pack(fill=tk.X, pady=(0, 10))
        
        # √úst panel sol kƒ±sƒ±m (tarih)
        self.ust_sol_panel = ttk.Frame(self.kontrol_panel)
        self.ust_sol_panel.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # √úst panel saƒü kƒ±sƒ±m (tema butonu)
        self.ust_sag_panel = ttk.Frame(self.kontrol_panel)
        self.ust_sag_panel.pack(side=tk.RIGHT, padx=5)
        
        # Tema deƒüi≈ütirme butonu
        self.tema_buton = ttk.Button(
            self.ust_sag_panel,
            text="üåô Dark Mod" if self.tema == "light" else "‚òÄÔ∏è Light Mod",
            command=self.tema_degistir,
            style='Accent.TButton'
        )
        self.tema_buton.pack(side=tk.RIGHT)
        
        # Tarih g√∂sterimi
        self.tarih_label = ttk.Label(self.ust_sol_panel, 
                                    text=f"Tarih: {self.bugunun_tarihi}", 
                                    font=('Helvetica', 12, 'bold'))
        self.tarih_label.pack(side=tk.LEFT, pady=(0, 10))
        
        # Kategori paneli
        self.kategori_panel = ttk.Frame(self.ana_frame)
        self.kategori_panel.pack(fill=tk.X, pady=(0, 10))
        
        self.kategori_frameler = {}
        self.kategori_etiketler = {}
        
        # Kategorileri grid ile yerle≈ütir
        for i, kategori in enumerate(list(self.kategoriler.keys()) + ["Diƒüer"]):
            frame = ttk.LabelFrame(self.kategori_panel, text=kategori)
            frame.grid(row=0, column=i, padx=5, sticky="ew")
            self.kategori_panel.grid_columnconfigure(i, weight=1)
            
            etiket = ttk.Label(frame, text="0.00 saat")
            etiket.pack(pady=5)
            
            self.kategori_frameler[kategori] = frame
            self.kategori_etiketler[kategori] = etiket
        
        # TreeView paneli
        self.tree_panel = ttk.Frame(self.ana_frame)
        self.tree_panel.pack(fill=tk.BOTH, expand=True)
        
        # Treeview
        self.tree = ttk.Treeview(self.tree_panel, 
                                columns=("ƒ∞kon", "Uygulama", "Kategori", "S√ºre", "Son Kullanƒ±m"), 
                                show="headings")
        self.tree.heading("ƒ∞kon", text="")
        self.tree.heading("Uygulama", text="Uygulama")
        self.tree.heading("Kategori", text="Kategori")
        self.tree.heading("S√ºre", text="S√ºre (saat)")
        self.tree.heading("Son Kullanƒ±m", text="Son Kullanƒ±m")
        
        self.tree.column("ƒ∞kon", width=30, anchor="center")
        self.tree.column("Uygulama", width=200)
        self.tree.column("Kategori", width=150)
        self.tree.column("S√ºre", width=100)
        self.tree.column("Son Kullanƒ±m", width=200)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(self.tree_panel, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # TreeView'e saƒü tƒ±k olayƒ± ekle
        self.tree.bind("<Button-3>", self.kategori_menu_goster)

    def icon_olustur(self):
        # Basit bir ikon olu≈ütur (16x16 piksel, mavi renk - RGB: 65, 105, 225)
        image = Image.new('RGB', (16, 16), color=(65, 105, 225))
        
        # Sistem tepsisi men√ºs√º
        menu = (
            pystray.MenuItem('G√∂ster', self.show_window),
            pystray.MenuItem('√áƒ±kƒ±≈ü', self.quit_window)
        )
        
        self.icon = pystray.Icon("ekran_takip", image, "Ekran S√ºresi Takip", menu)
        
        # ƒ∞konu ayrƒ± bir thread'de ba≈ülat
        icon_thread = threading.Thread(target=self.icon.run)
        icon_thread.daemon = True
        icon_thread.start()

    def quit_window(self, icon, item):
        """Programƒ± kapatƒ±rken verileri kaydet"""
        self.verileri_kaydet()  # Verileri kaydet
        self.icon_kapatiliyor = True
        icon.stop()
        self.pencere.after(0, self.pencere.destroy)
        
    def show_window(self, icon, item):
        self.pencere.after(0, self._show_window)
        
    def _show_window(self):
        self.pencere.deiconify()
        self.pencere.focus_force()
        
    def on_closing(self):
        """Pencere kapatƒ±ldƒ±ƒüƒ±nda √ßaƒürƒ±lƒ±r"""
        if not self.icon_kapatiliyor:
            self.pencere.withdraw()
            return "break"
        
    def takip_baslat(self):
        self.uygulama_takip()
        
    def aktif_pencere_al(self):
        try:
            hwnd = win32gui.GetForegroundWindow()
            _, pid = win32process.GetWindowThreadProcessId(hwnd)
            process = psutil.Process(pid)
            return process.name()
        except:
            return "bilinmeyen.exe"

    def uygulama_kategorisi(self, uygulama):
        """Uygulamanƒ±n kategorisini bul"""
        for kategori, uygulamalar in self.kategoriler.items():
            if uygulama.lower() in [u.lower() for u in uygulamalar]:
                return kategori
        return "Diƒüer"

    def uygulama_takip(self):
        simdiki_tarih = datetime.now().strftime('%d.%m.%Y')
        if simdiki_tarih != self.bugunun_tarihi:
            # G√ºn deƒüi≈üiminde verileri kaydet
            self.verileri_kaydet()
            
            # Yeni g√ºn i√ßin sƒ±fƒ±rla
            self.verileri_sifirla()
            self.bugunun_tarihi = simdiki_tarih
            self.tarih_label.configure(text=f"Tarih: {self.bugunun_tarihi}")
            
            # Yeni g√ºn√ºn √∂nceki verilerini y√ºkle
            self.onceki_verileri_yukle()
        
        aktif_uygulama = self.aktif_pencere_al()
        simdiki_zaman = time.time()
        gecen_sure = simdiki_zaman - self.son_kontrol
        
        if aktif_uygulama != self.aktif_uygulama:
            if self.aktif_uygulama:
                self.uygulama_zaman_araliklari[self.aktif_uygulama].append(
                    datetime.now().strftime('%H:%M')
                )
            self.aktif_uygulama = aktif_uygulama
        
        self.uygulama_sureleri[aktif_uygulama] += gecen_sure
        self.son_kontrol = simdiki_zaman
        
        # Her 5 dakikada bir otomatik kaydet
        if int(simdiki_zaman) % 300 == 0:
            self.verileri_kaydet()
        
        self.verileri_guncelle()
        self.pencere.after(1000, self.uygulama_takip)

    def verileri_guncelle(self):
        """Aray√ºzdeki verileri g√ºncelle"""
        try:
            # Kategori s√ºrelerini g√ºncelle
            self.kategori_sureleri.clear()
            for uygulama, sure in self.uygulama_sureleri.items():
                kategori = self.uygulama_kategorisi(uygulama)
                self.kategori_sureleri[kategori] += sure
            
            # Kategori etiketlerini g√ºncelle
            for kategori, sure in self.kategori_sureleri.items():
                if kategori in self.kategori_etiketler:
                    self.kategori_etiketler[kategori].configure(text=f"{sure/3600:.2f} saat")
            
            # TreeView'ƒ± temizle
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            # Uygulamalarƒ± s√ºreye g√∂re sƒ±rala ve ekle
            for uygulama, sure in sorted(self.uygulama_sureleri.items(), key=lambda x: x[1], reverse=True):
                if sure > 0:  # Sadece aktif kullanƒ±mƒ± olan uygulamalarƒ± g√∂ster
                    kategori = self.uygulama_kategorisi(uygulama)
                    son_kullanim = self.uygulama_zaman_araliklari[uygulama][-1] if self.uygulama_zaman_araliklari[uygulama] else "-"
                    
                    try:
                        # ƒ∞konu al
                        icon = self.get_file_icon(uygulama)
                        
                        # TreeView'a ekle
                        if icon:
                            self.tree.insert("", tk.END, values=(
                                "",  # ƒ∞kon s√ºtunu i√ßin bo≈ü deƒüer
                                uygulama,
                                kategori,
                                f"{sure/3600:.2f}",
                                son_kullanim
                            ), image=icon)
                        else:
                            # ƒ∞kon yoksa ikonsuz ekle
                            self.tree.insert("", tk.END, values=(
                                "",
                                uygulama,
                                kategori,
                                f"{sure/3600:.2f}",
                                son_kullanim
                            ))
                    except Exception as e:
                        print(f"Uygulama ekleme hatasƒ± ({uygulama}): {str(e)}")
                        # Hata durumunda ikonsuz ekle
                        self.tree.insert("", tk.END, values=(
                            "",
                            uygulama,
                            kategori,
                            f"{sure/3600:.2f}",
                            son_kullanim
                        ))
        
        except Exception as e:
            print(f"Veri g√ºncelleme hatasƒ±: {str(e)}")
            # Kritik hata durumunda kullanƒ±cƒ±yƒ± bilgilendir
            messagebox.showerror("Hata", "Veriler g√ºncellenirken bir hata olu≈ütu!")

    def verileri_sifirla(self):
        self.uygulama_sureleri.clear()
        self.uygulama_zaman_araliklari.clear()
        self.kategori_sureleri.clear()
        self.verileri_guncelle()

    def baslat(self):
        try:
            self.pencere.mainloop()
        finally:
            if self.icon:
                self.icon.stop()

    def istatistik_arayuzu_olustur(self):
        # Kontrol paneli
        kontrol_frame = ttk.Frame(self.istatistik_sekmesi)
        kontrol_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Tarih aralƒ±ƒüƒ± se√ßimi
        ttk.Label(kontrol_frame, text="Tarih Aralƒ±ƒüƒ±:", 
                 font=('Helvetica', 10)).pack(side=tk.LEFT, padx=5)
        
        self.tarih_secimi = ttk.Combobox(kontrol_frame, 
                                        values=["Son 7 G√ºn", "Son 30 G√ºn", "T√ºm Zamanlar"],
                                        state="readonly", width=15)
        self.tarih_secimi.set("Son 7 G√ºn")
        self.tarih_secimi.pack(side=tk.LEFT, padx=5)
        
        # Yenile butonu
        ttk.Button(kontrol_frame, text="Yenile",
                  command=self.istatistikleri_goster,
                  style='Accent.TButton').pack(side=tk.LEFT, padx=5)
        
        # ƒ∞statistik √∂zeti i√ßin frame
        self.ozet_frame = ttk.Frame(self.istatistik_sekmesi)
        self.ozet_frame.pack(fill=tk.X)
        
        # Grafikler i√ßin frame
        self.grafik_frame = ttk.Frame(self.istatistik_sekmesi)
        self.grafik_frame.pack(fill=tk.BOTH, expand=True)

    def istatistikleri_goster(self):
        try:
            # Mevcut grafikleri temizle
            for widget in self.grafik_frame.winfo_children():
                widget.destroy()
            for widget in self.ozet_frame.winfo_children():
                widget.destroy()
            
            # CSV dosyasƒ±nƒ± oku
            df = pd.read_csv('ekran_suresi_takip.csv')
            print("CSV dosyasƒ± okundu:", len(df), "kayƒ±t bulundu")
            
            # Tarihleri datetime'a √ßevir
            df['Tarih'] = pd.to_datetime(df['Tarih'], format='%d.%m.%Y')
            print("Tarihler d√∂n√º≈üt√ºr√ºld√º")
            
            # Sadece var olan tarihleri al ve sƒ±rala
            mevcut_tarihler = sorted(df['Tarih'].unique())
            
            # Tarih aralƒ±ƒüƒ±nƒ± filtrele
            if self.tarih_secimi.get() == "Son 7 G√ºn":
                son_tarih = mevcut_tarihler[-1]
                baslangic_tarihi = max(mevcut_tarihler[0], son_tarih - pd.Timedelta(days=6))
                df = df[(df['Tarih'] >= baslangic_tarihi) & (df['Tarih'] <= son_tarih)]
            elif self.tarih_secimi.get() == "Son 30 G√ºn":
                son_tarih = mevcut_tarihler[-1]
                baslangic_tarihi = max(mevcut_tarihler[0], son_tarih - pd.Timedelta(days=29))
                df = df[(df['Tarih'] >= baslangic_tarihi) & (df['Tarih'] <= son_tarih)]
            
            # G√ºnl√ºk kullanƒ±m grafiƒüi i√ßin verileri hazƒ±rla
            gunluk_kullanim = df.groupby('Tarih')['S√ºre (Saat)'].sum().reset_index()
            gunluk_kullanim = gunluk_kullanim.sort_values('Tarih')  # Tarihe g√∂re sƒ±rala
            
            # Ana fig√ºr olu≈ütur
            fig = plt.figure(figsize=(15, 12))
            gs = fig.add_gridspec(3, 2, 
                                height_ratios=[1, 1, 1], 
                                hspace=1.0,
                                wspace=0.4)
            
            # 1. G√ºnl√ºk Toplam Kullanƒ±m Grafiƒüi
            ax1 = fig.add_subplot(gs[0, :])
            ax1.plot(range(len(gunluk_kullanim)), gunluk_kullanim['S√ºre (Saat)'], 
                    color='#2196F3', linewidth=2, marker='o')
            ax1.fill_between(range(len(gunluk_kullanim)), gunluk_kullanim['S√ºre (Saat)'], 
                           alpha=0.2, color='#2196F3')
            ax1.set_xticks(range(len(gunluk_kullanim)))
            ax1.set_xticklabels([d.strftime('%d.%m.%Y') for d in gunluk_kullanim['Tarih']], 
                               rotation=0)
            ax1.grid(True, alpha=0.3)
            
            # 2. Kategori Pasta Grafiƒüi
            ax2 = fig.add_subplot(gs[1, 0])
            kategori_kullanim = df.groupby('Kategori')['S√ºre (Saat)'].sum()
            colors = ['#FF9800', '#2196F3', '#4CAF50', '#9C27B0', '#F44336']
            
            # Pasta grafiƒüi √ßiz
            wedges, texts, autotexts = ax2.pie(kategori_kullanim.values,
                                             labels=[''] * len(kategori_kullanim),
                                             colors=colors[:len(kategori_kullanim)],
                                             autopct='',
                                             startangle=90)
            
            # Etiketleri ve y√ºzdeleri alt alta ekle
            labels_with_pcts = []
            for label, val in zip(kategori_kullanim.index, kategori_kullanim.values):
                percentage = val/kategori_kullanim.sum()*100
                if percentage >= 1:  # %1'den b√ºy√ºk deƒüerleri g√∂ster
                    labels_with_pcts.append(f'{label}\n({percentage:.1f}%)')
                elif percentage > 0:  # %1'den k√º√ß√ºk deƒüerleri tek ondalƒ±klƒ± g√∂ster
                    labels_with_pcts.append(f'{label}\n({percentage:.1f}%)')
            
            # Legend'ƒ± grafiƒüin soluna yerle≈ütir ve boyutunu ayarla
            ax2.legend(wedges, labels_with_pcts,
                      title="Kategoriler",
                      loc="center right",
                      bbox_to_anchor=(-0.2, 0.5),
                      fontsize=9,
                      labelspacing=1.2)  # Etiketler arasƒ± bo≈üluƒüu artƒ±r
            
            # 3. En √áok Kullanƒ±lan Uygulamalar
            ax3 = fig.add_subplot(gs[1, 1])
            uygulama_kullanim = df.groupby('Uygulama')['S√ºre (Saat)'].sum().sort_values(ascending=True).tail(5)
            bars = ax3.barh(range(len(uygulama_kullanim)), uygulama_kullanim.values,
                          color='#2196F3')
            ax3.set_yticks(range(len(uygulama_kullanim)))
            ax3.set_yticklabels(uygulama_kullanim.index)
            
            for i, v in enumerate(uygulama_kullanim.values):
                ax3.text(v + 0.1, i, f'{v:.1f}s', va='center')
            
            # 4. Gece/G√ºnd√ºz Kullanƒ±m Grafiƒüi
            ax4 = fig.add_subplot(gs[2, :])
            
            # Ba≈ülangƒ±√ß saatlerini i≈üle
            def saat_donustur(x):
                try:
                    if pd.isna(x) or x == '-':
                        return 12
                    return int(x.split(':')[0])
                except:
                    return 12
            
            df['Saat'] = df['Saat'].apply(saat_donustur)
            
            def zaman_dilimi_hesapla(row):
                baslangic = row['Saat']
                sure = row['S√ºre (Saat)']
                if 0 <= baslangic < 12:
                    return sure, 0
                else:
                    return 0, sure
            
            df[['Gece', 'Gunduz']] = df.apply(zaman_dilimi_hesapla, axis=1, result_type='expand')
            
            # Sadece var olan g√ºnleri g√∂ster
            gunluk = df.groupby('Tarih').agg({
                'Gece': 'sum',
                'Gunduz': 'sum'
            }).reset_index()
            
            gunluk = gunluk.sort_values('Tarih')  # Tarihe g√∂re sƒ±rala
            
            bar_width = 0.35
            x = np.arange(len(gunluk))
            
            gece = ax4.bar(x - bar_width/2, 
                         gunluk['Gece'],
                         bar_width,
                         label='Gece (00:00-11:59)',
                         color='#2196F3',
                         alpha=0.7)
            
            gunduz = ax4.bar(x + bar_width/2, 
                            gunluk['Gunduz'],
                            bar_width,
                            label='G√ºnd√ºz (12:00-23:59)',
                            color='#FFA726',
                            alpha=0.7)
            
            def add_value_labels(bars):
                for bar in bars:
                    height = bar.get_height()
                    if height > 0:
                        ax4.text(bar.get_x() + bar.get_width()/2., height,
                               f'{height:.1f}',
                               ha='center', va='bottom',
                               fontsize=10, fontweight='bold')
            
            add_value_labels(gece)
            add_value_labels(gunduz)
            
            ax4.set_xticks(x)
            ax4.set_xticklabels([d.strftime('%d.%m.%Y') for d in gunluk['Tarih']],
                               rotation=0,
                               ha='center',
                               fontsize=10)
            
            ax4.legend(loc='upper right')
            ax4.grid(True, axis='y', linestyle='--', alpha=0.3)
            
            # Grafikleri canvas'a ekle
            canvas = FigureCanvasTkAgg(fig, self.grafik_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
            
            print("Grafikler ba≈üarƒ±yla olu≈üturuldu")
            
        except Exception as e:
            print(f"Grafik olu≈üturma hatasƒ±: {str(e)}")
            import traceback
            print("Hata detayƒ±:")
            print(traceback.format_exc())
            
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.text(0.5, 0.5, f'Grafik olu≈üturulamadƒ±\nHata: {str(e)}',
                   horizontalalignment='center',
                   verticalalignment='center')
            
            canvas = FigureCanvasTkAgg(fig, self.grafik_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=20, pady=10)

    def ozet_karti_olustur(self, parent, column, baslik, deger, renk):
        """√ñzet kartƒ± olu≈ütur"""
        kart = ttk.Frame(parent, style='Card.TFrame')
        kart.grid(row=0, column=column, padx=10, sticky="nsew")
        parent.grid_columnconfigure(column, weight=1)
        
        # BaÔøΩÔøΩlƒ±k
        ttk.Label(kart, text=baslik, 
                 font=('Helvetica', 10),
                 foreground='gray').pack(pady=(5,0))
        
        # Deƒüer
        ttk.Label(kart, text=deger,
                 font=('Helvetica', 14, 'bold')).pack(pady=(0,5))

    def verileri_kaydet(self):
        """Mevcut verileri CSV dosyasƒ±na kaydet"""
        try:
            csv_dosyasi = 'ekran_suresi_takip.csv'
            saat = datetime.now().strftime('%H:%M:%S')
            
            # Verileri hazƒ±rla
            veriler = []
            for uygulama, sure in self.uygulama_sureleri.items():
                kategori = self.uygulama_kategorisi(uygulama)
                son_kullanim = self.uygulama_zaman_araliklari[uygulama][-1] if self.uygulama_zaman_araliklari[uygulama] else "-"
                veriler.append({
                    'Tarih': self.bugunun_tarihi,
                    'Saat': saat,
                    'Uygulama': uygulama,
                    'Kategori': kategori,
                    'S√ºre (Saat)': round(sure/3600, 2),
                    'Son Kullanƒ±m': str(son_kullanim)
                })
            
            # Yeni DataFrame olu≈ütur
            yeni_df = pd.DataFrame(veriler)
            
            try:
                # Mevcut CSV dosyasƒ±nƒ± oku
                mevcut_df = pd.read_csv(csv_dosyasi, encoding='utf-8-sig')
                # Bug√ºn√ºn verilerini sil
                mevcut_df = mevcut_df[mevcut_df['Tarih'] != self.bugunun_tarihi]
            except FileNotFoundError:
                mevcut_df = pd.DataFrame()
            except Exception as e:
                print(f"CSV okuma hatasƒ±: {str(e)}")
                mevcut_df = pd.DataFrame()
            
            # Verileri birle≈ütir ve kaydet
            guncel_df = pd.concat([mevcut_df, yeni_df], ignore_index=True)
            guncel_df.to_csv(csv_dosyasi, index=False, encoding='utf-8-sig')
            print(f"{len(veriler)} uygulamanƒ±n verileri kaydedildi.")
            
            # Kayƒ±t i≈ülemi ba≈üarƒ±lƒ± olduysa tarihleri g√ºncelle
            if hasattr(self, 'tarih_combo'):
                self.tarihleri_yukle()
            
        except Exception as e:
            print(f"Veri kaydetme hatasƒ±: {str(e)}")

    def kategori_veritabanini_yukle(self):
        """Kategori veritabanƒ±nƒ± y√ºkle veya varsayƒ±lan kategori listesini olu≈ütur"""
        varsayilan_kategoriler = {
            "Sosyal Medya & ƒ∞leti≈üim": [
                # Web Tarayƒ±cƒ±larƒ±
                "chrome.exe", "firefox.exe", "msedge.exe", "opera.exe", "brave.exe", "vivaldi.exe",
                # Mesajla≈üma ve G√∂r√ºnt√ºl√º G√∂r√º≈üme
                "discord.exe", "telegram.exe", "whatsapp.exe", "teams.exe", "slack.exe",
                "zoom.exe", "skype.exe", "signal.exe", "viber.exe", "line.exe",
                # Sosyal Medya Uygulamalarƒ±
                "twitter.exe", "instagram.exe", "facebook.exe", "messenger.exe", "wechat.exe"
            ],
            "Oyun & Eƒülence": [
                # Oyun Platformlar
                "steam.exe", "epicgameslauncher.exe", "galaxyclient.exe", "origin.exe", "ubisoftconnect.exe",
                "battlenet.exe", "riotclientservices.exe", "playnite.exe",
                # Pop√ºler Oyunlar
                "league of legends.exe", "valorant.exe", "minecraft.exe", "fortnite.exe",
                "gta5.exe", "csgo.exe", "dota2.exe", "overwatch.exe", "apex_legends.exe",
                "rocketleague.exe", "among us.exe", "pubg.exe",
                # Medya Oynatƒ±cƒ±lar
                "spotify.exe", "vlc.exe", "wmplayer.exe", "musicbee.exe", "foobar2000.exe",
                "netflix.exe", "disney+.exe", "primevideo.exe"
            ],
            "√úretkenlik & Geli≈ütirme": [
                # Kod Edit√∂rleri ve IDE'ler
                "code.exe", "pycharm64.exe", "idea64.exe", "eclipse.exe", "sublime_text.exe",
                "atom.exe", "webstorm64.exe", "androidstudio64.exe", "rider64.exe", "clion64.exe",
                # Ofis Uygulamalarƒ±
                "winword.exe", "excel.exe", "powerpnt.exe", "outlook.exe", "onenote.exe",
                "acrobat.exe", "acrord32.exe", "libreoffice.exe", "wps.exe",
                # Not Alma ve Organizasyon
                "notepad.exe", "notepad++.exe", "obsidian.exe", "notion.exe", "evernote.exe",
                # Geli≈ütirici Ara√ßlarƒ±
                "git.exe", "github.exe", "postman.exe", "docker.exe", "virtualbox.exe",
                "vmware.exe", "filezilla.exe", "putty.exe"
            ],
            "Tasarƒ±m & Multimedya": [
                # Adobe √úr√ºnleri
                "photoshop.exe", "illustrator.exe", "indesign.exe", "premiere.exe",
                "aftereffects.exe", "animate.exe", "lightroom.exe", "audition.exe",
                # Diƒüer Tasarƒ±m Ara√ßlarƒ±
                "figma.exe", "sketch.exe", "xd.exe", "gimp.exe", "inkscape.exe",
                "blender.exe", "maya.exe", "3dsmax.exe", "zbrush.exe",
                # Video ve Ses D√ºzenleme
                "vegaspro.exe", "resolve.exe", "obs64.exe", "audacity.exe", "reaper.exe",
                "flstudio.exe", "ableton.exe", "cubase.exe"
            ],
            "Sistem & Yardƒ±mcƒ± Programlar": [
                # Windows Sistem Ara√ßlarƒ±
                "explorer.exe", "taskmgr.exe", "cmd.exe", "powershell.exe",
                "control.exe", "mmc.exe", "regedit.exe", "services.exe",
                # Yardƒ±mcƒ± Programlar
                "winrar.exe", "7zfm.exe", "ccleaner.exe", "teamviewer.exe", "anydesk.exe",
                "msiafterburner.exe", "cpuz.exe", "gpuz.exe", "hwinfo64.exe",
                # G√ºvenlik
                "avgui.exe", "mbam.exe", "360safe.exe", "kaspersky.exe", "norton.exe"
            ]
        }
        
        try:
            if os.path.exists(self.kategori_dosyasi):
                with open(self.kategori_dosyasi, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                with open(self.kategori_dosyasi, 'w', encoding='utf-8') as f:
                    json.dump(varsayilan_kategoriler, f, ensure_ascii=False, indent=4)
                return varsayilan_kategoriler
        except:
            return varsayilan_kategoriler

    def kategori_veritabanini_kaydet(self):
        """Kategori veritabanƒ±nƒ± dosyaya kaydet"""
        try:
            with open(self.kategori_dosyasi, 'w', encoding='utf-8') as f:
                json.dump(self.kategoriler, f, ensure_ascii=False, indent=4)
        except Exception as e:
            print(f"Kategori kaydetme hatasƒ±: {str(e)}")

    def kategori_menu_goster(self, event):
        """Saƒü tƒ±k men√ºs√ºn√º g√∂ster"""
        item = self.tree.identify('item', event.x, event.y)
        if item:
            # Se√ßili uygulamayƒ± al
            uygulama = self.tree.item(item)['values'][1]  # ƒ∞kinci s√ºtun uygulama adƒ±
            
            # Men√º olu≈ütur
            menu = tk.Menu(self.pencere, tearoff=0)
            
            # Kategori alt men√ºs√º
            kategori_menu = tk.Menu(menu, tearoff=0)
            for kategori in self.kategoriler.keys():
                kategori_menu.add_command(
                    label=kategori,
                    command=lambda k=kategori: self.uygulama_kategorisini_degistir(uygulama, k)
                )
            
            # Yeni kategori ekleme se√ßeneƒüi
            kategori_menu.add_separator()
            kategori_menu.add_command(
                label="Yeni Kategori Olu≈ütur...",
                command=lambda: self.yeni_kategori_olustur(uygulama)
            )
            
            menu.add_cascade(label="Kategori Deƒüi≈ütir", menu=kategori_menu)
            menu.tk_popup(event.x_root, event.y_root)

    def yeni_kategori_olustur(self, uygulama):
        """Yeni kategori olu≈üturma penceresi"""
        dialog = tk.Toplevel(self.pencere)
        dialog.title("Yeni Kategori")
        dialog.geometry("300x150")
        dialog.transient(self.pencere)
        dialog.grab_set()
        
        # Kategori adƒ± giri≈üi
        ttk.Label(dialog, text="Kategori Adƒ±:").pack(pady=5)
        entry = ttk.Entry(dialog)
        entry.pack(pady=5)
        
        # Se√ßili uygulama bilgisi
        ttk.Label(dialog, text=f"Se√ßili Uygulama: {uygulama}", font=("Helvetica", 9, "italic")).pack(pady=5)
        
        def kaydet():
            yeni_kategori = entry.get().strip()
            if yeni_kategori:
                if yeni_kategori not in self.kategoriler:
                    # Yeni kategoriyi olu≈ütur ve uygulamayƒ± ekle
                    self.kategoriler[yeni_kategori] = [uygulama]
                    
                    # Eski kategoriden kaldƒ±r
                    for kategori, uygulamalar in self.kategoriler.items():
                        if kategori != yeni_kategori and uygulama.lower() in [u.lower() for u in uygulamalar]:
                            uygulamalar.remove(uygulama)
                    
                    # Veritabanƒ±nƒ± g√ºncelle
                    self.kategori_veritabanini_kaydet()
                    
                    # Aray√ºz√º g√ºncelle
                    self.verileri_guncelle()
                    
                    messagebox.showinfo("Ba≈üarƒ±lƒ±", f"'{yeni_kategori}' kategorisi olu≈üturuldu ve '{uygulama}' eklendi!")
                    dialog.destroy()
                else:
                    messagebox.showwarning("Uyarƒ±", "Bu kategori zaten mevcut!")
        
        # Kaydet butonu
        ttk.Button(dialog, text="Kaydet", command=kaydet).pack(pady=10)
        
        # Enter tu≈üu ile kaydetme
        entry.bind('<Return>', lambda e: kaydet())
        
        # Pencereyi ortala
        dialog.update_idletasks()
        width = dialog.winfo_width()
        height = dialog.winfo_height()
        x = (dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (dialog.winfo_screenheight() // 2) - (height // 2)
        dialog.geometry('{}x{}+{}+{}'.format(width, height, x, y))
        
        # Odaƒüƒ± entry'e ver
        entry.focus()

    def uygulama_kategorisini_degistir(self, uygulama, yeni_kategori):
        """Uygulamanƒ±n kategorisini deƒüi≈ütir"""
        # Eski kategoriden kaldƒ±r
        for kategori, uygulamalar in self.kategoriler.items():
            if uygulama.lower() in [u.lower() for u in uygulamalar]:
                uygulamalar.remove(uygulama)
        
        # Yeni kategoriye ekle
        if uygulama not in self.kategoriler[yeni_kategori]:
            self.kategoriler[yeni_kategori].append(uygulama)
        
        # Veritabanƒ±nƒ± g√ºncelle
        self.kategori_veritabanini_kaydet()
        
        # Aray√ºz√º g√ºncelle
        self.verileri_guncelle()

    def gunluk_istatistik_arayuzu_olustur(self):
        # Kontrol paneli
        kontrol_frame = ttk.Frame(self.gunluk_istatistik_sekmesi)
        kontrol_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Tarih se√ßimi
        ttk.Label(kontrol_frame, text="Tarih Se√ßin:", 
                 font=('Helvetica', 10)).pack(side=tk.LEFT, padx=5)
        
        # Tarih se√ßici i√ßin ComboBox
        self.tarih_combo = ttk.Combobox(kontrol_frame, state="readonly", width=20)
        self.tarih_combo.pack(side=tk.LEFT, padx=5)
        
        # Mevcut tarihleri y√ºkle
        self.tarihleri_yukle()
        
        # Yenile butonu
        ttk.Button(kontrol_frame, text="G√∂ster",
                  command=self.secili_gun_istatistiklerini_goster,
                  style='Accent.TButton').pack(side=tk.LEFT, padx=5)
        
        # Grafikler i√ßin frame
        self.gunluk_grafik_frame = ttk.Frame(self.gunluk_istatistik_sekmesi)
        self.gunluk_grafik_frame.pack(fill=tk.BOTH, expand=True)
        
    def tarihleri_yukle(self):
        """CSV dosyasƒ±ndan mevcut tarihleri y√ºkle"""
        try:
            df = pd.read_csv('ekran_suresi_takip.csv')
            # Tarihleri datetime'a √ßevir
            df['Tarih'] = pd.to_datetime(df['Tarih'], format='%d.%m.%Y')
            # Tarihleri sƒ±rala ve tekrar orijinal formata √ßevir
            tarihler = sorted(df['Tarih'].unique(), reverse=True)  # En yeni tarihler ba≈üta
            tarihler = [tarih.strftime('%d.%m.%Y') for tarih in tarihler]
            
            self.tarih_combo['values'] = tarihler
            if tarihler:
                self.tarih_combo.set(tarihler[0])  # En son tarihi se√ß
                
            print(f"Toplam {len(tarihler)} tarih y√ºklendi")
            
        except Exception as e:
            print(f"Tarih y√ºkleme hatasƒ±: {str(e)}")
            messagebox.showerror("Hata", "Tarihler y√ºklenirken bir hata olu≈ütu!")

    def secili_gun_istatistiklerini_goster(self):
        """Se√ßili g√ºn√ºn istatistiklerini g√∂ster"""
        try:
            # Mevcut grafikleri temizle
            for widget in self.gunluk_grafik_frame.winfo_children():
                widget.destroy()
            
            secili_tarih = self.tarih_combo.get()
            if not secili_tarih:
                messagebox.showwarning("Uyarƒ±", "L√ºtfen bir tarih se√ßin!")
                return
            
            # CSV dosyasƒ±nƒ± oku ve se√ßili tarihe g√∂re filtrele
            df = pd.read_csv('ekran_suresi_takip.csv')
            gunluk_veriler = df[df['Tarih'] == secili_tarih]
            
            if gunluk_veriler.empty:
                messagebox.showinfo("Bilgi", "Se√ßili tarih i√ßin veri bulunamadƒ±!")
                return
            
            # Ana fig√ºr olu≈ütur
            fig = plt.figure(figsize=(15, 10))
            gs = fig.add_gridspec(2, 2, hspace=0.4, wspace=0.3)
            
            # 1. Kategori Pasta Grafiƒüi
            ax1 = fig.add_subplot(gs[0, 0])
            kategori_kullanim = gunluk_veriler.groupby('Kategori')['S√ºre (Saat)'].sum()
            colors = ['#FF9800', '#2196F3', '#4CAF50', '#9C27B0', '#F44336']
            
            wedges, texts, autotexts = ax1.pie(kategori_kullanim.values,
                                             labels=[''] * len(kategori_kullanim),
                                             colors=colors[:len(kategori_kullanim)],
                                             autopct='',
                                             startangle=90)
            
            # Etiketleri ekle
            labels_with_pcts = []
            for label, val in zip(kategori_kullanim.index, kategori_kullanim.values):
                percentage = val/kategori_kullanim.sum()*100
                if percentage >= 1:
                    labels_with_pcts.append(f'{label}\n({percentage:.1f}%)')
                elif percentage > 0:
                    labels_with_pcts.append(f'{label}\n({percentage:.1f}%)')
            
            ax1.legend(wedges, labels_with_pcts,
                      title="Kategoriler",
                      loc="center left",
                      bbox_to_anchor=(-0.1, 0.5),
                      fontsize=9,
                      labelspacing=1.2)
            
            ax1.set_title('G√ºnl√ºk Kategori Daƒüƒ±lƒ±mƒ±', pad=20)
            
            # 2. En √áok Kullanƒ±lan Uygulamalar
            ax2 = fig.add_subplot(gs[0, 1])
            uygulama_kullanim = gunluk_veriler.groupby('Uygulama')['S√ºre (Saat)'].sum().sort_values(ascending=True).tail(5)
            bars = ax2.barh(range(len(uygulama_kullanim)), uygulama_kullanim.values,
                          color='#2196F3')
            ax2.set_yticks(range(len(uygulama_kullanim)))
            ax2.set_yticklabels(uygulama_kullanim.index)
            
            for i, v in enumerate(uygulama_kullanim.values):
                ax2.text(v + 0.1, i, f'{v:.1f}s', va='center')
            
            ax2.set_title('En √áok Kullanƒ±lan Uygulamalar', pad=20)
            
            # 3. Gece/G√ºnd√ºz Kullanƒ±m Grafiƒüi
            ax3 = fig.add_subplot(gs[1, :])
            
            def saat_donustur(x):
                try:
                    if pd.isna(x) or x == '-':
                        return 12
                    return int(x.split(':')[0])
                except:
                    return 12
            
            gunluk_veriler['Saat'] = gunluk_veriler['Saat'].apply(saat_donustur)
            
            def zaman_dilimi_hesapla(row):
                baslangic = row['Saat']
                sure = row['S√ºre (Saat)']
                if 0 <= baslangic < 12:
                    return sure, 0
                else:
                    return 0, sure
            
            gunluk_veriler[['Gece', 'Gunduz']] = gunluk_veriler.apply(zaman_dilimi_hesapla, axis=1, result_type='expand')
            
            toplam_gece = gunluk_veriler['Gece'].sum()
            toplam_gunduz = gunluk_veriler['Gunduz'].sum()
            
            zaman_dilimleri = ['Gece\n(00:00-11:59)', 'G√ºnd√ºz\n(12:00-23:59)']
            degerler = [toplam_gece, toplam_gunduz]
            
            bars = ax3.bar(zaman_dilimleri, degerler,
                         color=['#2196F3', '#FFA726'])
            
            # Deƒüerleri bar √ºzerine ekle
            for bar in bars:
                height = bar.get_height()
                ax3.text(bar.get_x() + bar.get_width()/2., height,
                        f'{height:.1f}s',
                        ha='center', va='bottom')
            
            ax3.set_title('Gece/G√ºnd√ºz Kullanƒ±m Daƒüƒ±lƒ±mƒ±', pad=20)
            ax3.grid(True, axis='y', linestyle='--', alpha=0.3)
            
            # Grafikleri canvas'a ekle
            canvas = FigureCanvasTkAgg(fig, self.gunluk_grafik_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
            
        except Exception as e:
            print(f"G√ºnl√ºk istatistik g√∂sterme hatasƒ±: {str(e)}")
            messagebox.showerror("Hata", "ƒ∞statistikler g√∂sterilirken bir hata olu≈ütu!")

    def tema_degistir(self):
        """Temayƒ± dark ve light mod arasƒ±nda deƒüi≈ütirir"""
        if self.tema == "dark":
            self.tema = "light"
            self.tema_buton.configure(text="üåô Dark Mod")
        else:
            self.tema = "dark"
            self.tema_buton.configure(text="‚òÄÔ∏è Light Mod")
        
        sv_ttk.set_theme(self.tema)
        
        # Grafiklerin temasƒ±nƒ± g√ºncelle
        self.grafik_temasini_guncelle()
        
        # ƒ∞statistik sekmesindeki grafikleri yenile
        if hasattr(self, 'istatistik_sekmesi'):
            self.istatistikleri_goster()
        
        # G√ºnl√ºk istatistik sekmesindeki grafikleri yenile
        if hasattr(self, 'gunluk_istatistik_sekmesi'):
            self.secili_gun_istatistiklerini_goster()

    def grafik_temasini_guncelle(self):
        """Grafiklerin temasƒ±nƒ± g√ºnceller"""
        if self.tema == "dark":
            plt.style.use('dark_background')
            self.grafik_renkleri = ['#FF9800', '#2196F3', '#4CAF50', '#9C27B0', '#F44336']
        else:
            plt.style.use('default')
            self.grafik_renkleri = ['#FF9800', '#2196F3', '#4CAF50', '#9C27B0', '#F44336']

if __name__ == "__main__":
    uygulama = ModernEkranTakip()
    uygulama.baslat()
